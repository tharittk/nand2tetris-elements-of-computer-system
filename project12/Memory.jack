// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, freeList, freeListTail;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; //heap base
        let freeList = heap;
        let heap[0] = 0 ; // next
        let heap[1] = 14334; //length

    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block;
        var Array targetBlock, currentFreeList;
        
        let currentFreeList = heap;
        let targetBlock = currentFreeList;


        while (currentFreeList[1] < (size + 2) and ~(currentFreeList[0] = null) ){
            let currentFreeList = currentFreeList[0]; // next candidate
        }

        if (currentFreeList[0] = null){
            return -1 ; //failure
        }

        // carve out        
        let targetBlock = currentFreeList[2 + (currentFreeList[1] - size)]; // skip overhead
        let currentFreeList[1] = currentFreeList[1] - (size + 2); // reduce size

        // set overhead for new block
        let targetBlock[0] = null;
        let targetBlock[1] = size;
        return targetBlock[2]; // skip overhead

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // go to last block
        let currentFreeList = heap;

        while (~(currentFreeList[0] = null) ){
            let currentFreeList = currentFreeList[0]; // next candidate
        }

        let currentFreeList[0] = o[-2]; // o[-2] is null by defualt

    }

}
