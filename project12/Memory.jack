// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; //heap base
        let freeList = 2048;
        let heap[0] = 0 ; // next
        let heap[1] = 14335; //length
        return;

    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;

    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

        var int targetBlock , sizeNeeded;
        var Array currentFreeList;
        var boolean endOfList;
        
        let targetBlock = 0;
        let currentFreeList = freeList;
        let sizeNeeded = size + 2;
        while ( (targetBlock = 0) & ~endOfList ){

            if (currentFreeList[0] = 0) {let endOfList = true;} 
        
            if ((currentFreeList[1] > sizeNeeded) | (currentFreeList[1] = sizeNeeded)){
                let targetBlock = currentFreeList +  (currentFreeList[1] - size);
                let ram[targetBlock - 1] = size;
                let currentFreeList[1] = currentFreeList[1] - sizeNeeded ; // reduce size
            }
            else{ // keep going
            let currentFreeList = currentFreeList[0];
            }
        }

        return targetBlock; 
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // go to last block
        /*
        var Array currentFreeList;
        let currentFreeList = heap;

        while (~(currentFreeList[0] = 0) ){
            let currentFreeList = currentFreeList[0]; // next candidate
        }
        let ram[o-2] = currentFreeList;
        let currentFreeList[0] = o-2; // o[-2] is null by defualt
        return;*/

        let ram[o-2] = freeList;
        let freeList = o - 2;
        return;

    }

}
