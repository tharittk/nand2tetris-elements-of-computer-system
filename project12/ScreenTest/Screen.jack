// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int k, num;
        let twoToThe = Array.new(16); //16-bit number
        let k = 0;
        let num = 1;
        while (k < 16){
            let twoToThe[k] = num;
            let num = num + num; // 2x num
            let k = k +1 ;

        }
        let color = true;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;

    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, toSetBit, oper;
        var Array One16, Zero16;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);

        // set (x % 16)th bit of value to the current color
        let toSetBit = x;
        while (toSetBit > 15){
            let toSetBit = (toSetBit - 16);
        }
    
        let oper = twoToThe[toSetBit];// 0000 1 0000
        // set to black
        if (color){
            let value = (value | oper);
        }
        else{
            let oper = ~oper; // 1111 0 1111
            let value = (value & oper);
        }
        //do Output.printInt(address)
        do Memory.poke(16384 + address, value);
        return;

    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x,y,dx, dy, diff, a, b, tmp_x, tmp_y, xDir, yDir;

        let x = x1;
        let y = y1;
        let xDir = (x2 > x1);
        let yDir = (y2 > y1);

        let dx = Math.abs(x2 - x1); // simplifying cases
        let dy = Math.abs(y2 - y1);
        let a = 0;
        let b = 0;
        let diff = 0;

        // special case vertical line
        if (x1 = x2){
            while ((b < dy) | (b = dy)){
                if (yDir){
                    do Screen.drawPixel(x1, y1 + b);
                }
                else{
                    do Screen.drawPixel(x1, y1 - b);
                }
                let b = b + 1;
            }
            return;
        }
        // special case horizontal
        if (y1 = y2){
            while ((a < dx) | (a = dx)){
                if (xDir){
                    do Screen.drawPixel(x1 + a, y1);
                }
                else{
                    do Screen.drawPixel(x1 - a, y1);
                }
                let a = a + 1;
            }
            return;
        }

        // general case -- 4 scenarios
        while (((a < dx) | (a = dx)) & (((b < dy) | (b = dy)))) {

            if (xDir) {
                let tmp_x = a;
            } else {
                let tmp_x = -a;
            }
            if (yDir) {
                let tmp_y = b;
            } else {
                let tmp_y = -b;
            }

            do Screen.drawPixel(x + tmp_x, y + tmp_y);

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
    
        return;
        
        
        

    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        // filled rec
        var int y;
        let y = y1;
        while ((y < y2) | (y = y2)){
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;

        }
        return;

    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int cx, int cy, int r) {
        var int dy;
        let dy = -r;

        if (r > 181){
            let r = 181;
        }
        while (dy < r){
            do Screen.drawLine( cx - Math.sqrt((r * r) - (dy * dy)), cy + dy, cx + Math.sqrt((r * r) - (dy * dy)), cy  + dy);
            let dy = dy + 1;
        }
        return;
    }
}
