// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    fied Array str;
    field int length;
    field int maxLength;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLength = maxLength;
        if(maxLength = 0){
            let maxLength = 1; // acquire one slot at least
        }
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLength){
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let str[length] = null;
        return this;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isNeg;
        var int val, i, tmp;

        let isNeg = false;
        let val = 0;
        let i = 0;

        if (str[0] = 45){
            let isNeg = true;
            let str[0] = 48; // replace - with 48 so it does bit affect calculation
        }

        while (i < length){
            let tmp = str[i] - 48;
             if ( (d < 0) | (d > 9)){
                return val;
             }
             let val = val * 10  + d;
             let i = i + 1;
        }

        if (isNeg){
            return -val;
        }
        else{
            return val;
        }


    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {

        var boolean isNeg;
        var int divTen, lastDigit, ascii, i, lengthOrig;
        //create empty string
        let i = 0;
        let lengthOrig = length; // erae char affect length

        while (i < length){
            do eraseLastChar();
            let i = i + 1;
        }

        // process
        if (val < 0){ 
            let isNeg = true;
            do str.appendChar(45);
            }

        let val = Math.abs(val);
        let divTen = ( val / 10);
        let lastDigit = val - divTen * 10;
        let ascii = 48 + lastDigit; //base of number in ascii
    

        if (val < 10){
            return  str.appendChar(ascii);
        }
        else{  
            return  String.setInt(str, divTen).appendChar(ascii);
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
