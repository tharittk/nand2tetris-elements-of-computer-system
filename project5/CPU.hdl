// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    And(a = instruction[5], b = instruction[15], out = CInstructAndwriteA);
    Not(in = instruction[15], out = isAInstruct);
    Or(a = CInstructAndwriteA, b = isAInstruct, out = loadA);

    And(a = instruction[4], b = instruction[15], out = CInstructAndLoadD);



    ARegister(in = InstALUMuxOut, load = loadA , out = ARegOut, out[0..14] = addressM);
    DRegister(in = ALUOut , load = CInstructAndLoadD , out = DRegOut);
    
    // A or C instruction (a == 0 load new instruction, a==1 - C-intstrcution)
    Mux16(a = instruction , b = ALUOut, sel = instruction[15] , out = InstALUMuxOut);

    // a == 0 (A D ops) or a == 1 (D M ops -- read from memory inM)
    Mux16(a = ARegOut, b = inM, sel = instruction[12], out = AMMuxOut);

    ALU(x = DRegOut, y = AMMuxOut, 
     zx = instruction[11], 
     nx = instruction[10] , 
     zy = instruction[9], 
     ny = instruction[8] , 
     f = instruction[7] ,
     no = instruction[6], 
     out = ALUOut, out = outM , zr = ALUOutZero , ng = ALUOutNeg);

    //writeM when C instruction only
    And(a = instruction[15], b = instruction[3], out = writeM);



    //jump condition j1j2j3 = inst[2, 1 ,0] lsb
    Not(in = instruction[2], out = notJ1);
    Not(in = instruction[1], out = notJ2);
    Not(in = instruction[0], out = notJ3);

    And(a = instruction[2], b = instruction[1], out = j1Andj2);
    And(a = instruction[2], b = instruction[0], out = j1Andj3);
    And(a = instruction[1], b = instruction[0], out = j2Andj3);

    //And(a = instruction[2], b = notJ2, out = j1AndnotJ2);
    //And(a = instruction[2], b = notJ3, out = j1AndnotJ3);
    //And(a = instruction[1], b = notJ3, out = j2AndnotJ3);

    And(a = notJ1, b = notJ2, out = notJ1AndnotJ2);
    And(a = notJ1, b = notJ3, out = notJ1AndnotJ3);
    And(a = notJ2, b = notJ3, out = notJ2AndnotJ3);


    And(a = notJ1AndnotJ2, b = notJ3, out = isNull);
    And(a = notJ1AndnotJ2, b = instruction[0], out = isJGT);
    And(a = notJ1AndnotJ3, b = instruction[1], out = isJEQ);
    And(a = notJ1, b = j2Andj3, out = isJGE);
    And(a = instruction[2], b = notJ2AndnotJ3, out = isJLT);
    And(a = j1Andj3, b = notJ2, out = isJNE);
    And(a = j1Andj2, b = notJ3, out = isJLE);
    And(a = j1Andj2, b = instruction[0], out = isJMP);


    //no need
    //And(a = isNull, b = true, out = noJump);
    Not(in = ALUOutZero, out = notZr);
    Not(in = ALUOutNeg, out = notNeg);
    And(a = notZr, b = notNeg, out = isStrictPositive);
    And(a = notZr, b = ALUOutNeg, out = isStrictNegative);
    Or(a = ALUOutZero, b = notNeg, out = isPositive);
    Or(a = ALUOutNeg, b = ALUOutZero, out = isNegative);



    And(a = isJGT, b = isStrictPositive, out = JGT);
    And(a = isJEQ, b = ALUOutZero, out = JEQ);
    And(a = isJGE, b = isPositive, out = JGE);
    And(a = isJLT, b = isStrictNegative, out = JLT);
    And(a = isJNE, b = notZr, out = JNE);
    And(a = isJLE, b = isNegative, out = JLE);



    Or8Way(in[0] = false, in[1] = JGT, in[2] = JEQ, in[3] = JGE, in[4] = JLT, in[5] = JNE, in[6] = JLE, in[7] = isJMP, out = isJump);
    
    //assert C instrction
    And(a = instruction[15], b = isJump, out = isJumpCinstruct);
    Not(in = isJumpCinstruct, out = notisJump);

    PC(in = ARegOut, load = isJumpCinstruct, inc = notisJump , reset = reset , out[0..14] = pc);

}