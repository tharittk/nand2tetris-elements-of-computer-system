// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // RAM16K = 0000 0000 0000 0000 -> 0011 1111 1111 1111 || locally access first 14 bit
    // SCREEN = 0100 0000 0000 0000 -> 0101 1111 1111 1111 || Locally Access 000 0000 0000 ->  0001 1111 1111 (i.e. first 13 bit) 
    // KBD =                           0110 0000 0000 0000 

    // 2^13 = 8192, 2^14 = 16384
    Not16(in=in, out=notIn);
    And16(a=in, b=notIn, out=zeros);

    Mux16(a = in, b = zeros, sel = address[14], out = inToRam);
    Mux16(a = zeros, b = in, sel = address[14], out = inToScreen);

    Not(in = address[13], out = notKbd);
    And(a = load, b = address[14], out = temp);
    And(a = temp, b = notKbd, out = loadToScreen);

    Not(in = address[14], out = notScreen);
    And(a = load, b = notScreen, out = loadToRam);


    RAM16K(in=inToRam, load=loadToRam, address=address[0..13], out=RamOut); //end at 16383 i.e.2^14 = 16384
    Screen(in=inToScreen, load=loadToScreen, address=address[0..12], out=ScreenOut); //16384 -> 24575 = 16383  + 2^13 (8192)
    Keyboard(out=KbdOut);

    Mux16(a = RamOut, b = ScreenOut , sel = address[14], out= selRamScreen);
    And(a = address[13], b = address[14], out = isKbd);
    Mux16(a = selRamScreen, b = KbdOut, sel = isKbd, out = out);

    //KBD // 24576

}